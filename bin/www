#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("robotmna:server");
var http = require("http");
var https = require("https");
var express = require("express");
var httpApp = express();
var fs = require("fs");

const options = {
  key: fs.readFileSync("./cert/myssl/private.key"),
  cert: fs.readFileSync("./cert/myssl/certificate.crt"),
  ca: fs.readFileSync("./cert/myssl/ca_bundle.crt"),
};

httpApp.set("port", process.env.HTTP_PORT);
httpApp.get("*", function (req, res, next) {
  console.log("http connect");
  res.redirect("https://" + req.headers.host + req.path);
});

var port = normalizePort(process.env.HTTPS_PORT);
app.set("port", port);

var server = https.createServer(options, app);

http.createServer(httpApp).listen(process.env.HTTP_PORT);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
